{"version":3,"sources":["../../../src/js/Views/LazyLoadView.js"],"names":["LazyLoadView","initialize","console","log","constructor","name","queue","TypeError","render","force","rendered","on","data","subview","renderSubView","view","element","forced","shouldRenderSubView","handle","inView","isInView","extend"],"mappings":";;;;AAAA;;;;;;;;;;;;IACqBA,Y;;;;;;;;;wBAEpBC,U,yBAAa;AACZC,UAAQC,GAAR,CAAa,sBAAsB,KAAKC,WAAL,CAAiBC,IAApD;;AAEA,kCAAMJ,UAAN;AACA,OAAKK,KAAL,GAAa,EAAb;AACA,MAAK,KAAKF,WAAL,CAAiBC,IAAjB,KAA0B,cAA/B,EAAgD;AAC/C,SAAM,IAAIE,SAAJ,CAAe,kDAAf,CAAN;AACA;AACD,E;;wBAEDC,M,mBAAQC,K,EAAQ;AAAA;;AACf,MAAIC,WAAW,KAAKA,QAApB;AACA,kCAAMF,MAAN,YAAcC,KAAd;;AAEA,MAAK,CAACC,QAAD,IAAaD,KAAlB,EAA0B;AACzB,QAAKE,EAAL,CAAS,aAAT,EAAwB,UAAEC,IAAF,EAAY;AACnC,QAAK,OAAKN,KAAL,CAAYM,KAAKC,OAAjB,CAAL,EAAkC;AACjCX,aAAQC,GAAR,CAAa,gBAAb,EAA+B,OAAKG,KAAL,CAAYM,KAAKC,OAAjB,CAA/B;AACA,YAAKC,aAAL,CACCF,KAAKC,OADN,EAEC,OAAKP,KAAL,CAAYM,KAAKC,OAAjB,EAA2BE,IAF5B,EAGC,OAAKT,KAAL,CAAYM,KAAKC,OAAjB,EAA2BG,OAH5B,EAIC,OAAKV,KAAL,CAAYM,KAAKC,OAAjB,EAA2BI,MAJ5B;AAMA,YAAO,OAAKX,KAAL,CAAYM,KAAKC,OAAjB,CAAP;AACA;AACD,IAXD;;AAaA,QAAKF,EAAL,CAAS,aAAT,EAAwB,UAAGC,IAAH,EAAa;AACpC;AACA,IAFD;AAGA;AACD,E;;wBAEDM,mB,gCAAqBC,M,EAAQJ,I,EAAMC,O,EAASC,M,EAAS;AACpD,MAAIG,SAAS,KAAKC,QAAL,CAAeL,QAAS,CAAT,CAAf,CAAb;AACA,MAAK,CAACI,MAAN,EAAe;AACd,QAAKd,KAAL,CAAYa,MAAZ,IAAuB,EAAEJ,UAAF,EAAQC,gBAAR,EAAiBC,cAAjB,EAAvB;AACA;AACD,SAAOG,MAAP;AACA,E;;;EA1CwC,wBAAcE,MAAd,E;;kBAArBtB,Y","file":"LazyLoadView.js","sourcesContent":["import ScrollSpyView from \"./ScrollSpyView\";\nexport default class LazyLoadView extends ScrollSpyView.extend() {\n\n\tinitialize() {\n\t\tconsole.log( 'lazyloadviewview ' + this.constructor.name );\n\n\t\tsuper.initialize();\n\t\tthis.queue = {};\n\t\tif ( this.constructor.name === 'LazyLoadView' ) {\n\t\t\tthrow new TypeError( \"Cannot construct LazyLoadView instances directly\" );\n\t\t}\n\t}\n\n\trender( force ) {\n\t\tlet rendered = this.rendered;\n\t\tsuper.render( force );\n\n\t\tif ( !rendered || force ) {\n\t\t\tthis.on( 'scrollEnter', ( data ) => {\n\t\t\t\tif ( this.queue[ data.subview ] ) {\n\t\t\t\t\tconsole.log( 'lazy rendering', this.queue[ data.subview ] );\n\t\t\t\t\tthis.renderSubView(\n\t\t\t\t\t\tdata.subview,\n\t\t\t\t\t\tthis.queue[ data.subview ].view,\n\t\t\t\t\t\tthis.queue[ data.subview ].element,\n\t\t\t\t\t\tthis.queue[ data.subview ].forced\n\t\t\t\t\t);\n\t\t\t\t\tdelete this.queue[ data.subview ];\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.on( 'scrollLeave', (  data ) => {\n\t\t\t\t// console.log( 'scrollLeave', data );\n\t\t\t} )\n\t\t}\n\t}\n\n\tshouldRenderSubView( handle, view, element, forced ) {\n\t\tlet inView = this.isInView( element[ 0 ] );\n\t\tif ( !inView ) {\n\t\t\tthis.queue[ handle ] = { view, element, forced };\n\t\t}\n\t\treturn inView;\n\t}\n}"]}