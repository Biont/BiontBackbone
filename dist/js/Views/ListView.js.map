{"version":3,"sources":["../../../src/js/Views/ListView.js"],"names":["ListView","data","options","view","TypeError","constructor","name","listenTo","collection","render","_views","Map","$el","empty","force","is","console","log","isEmpty","clear","models","removeObsoleteViews","curView","forEach","item","index","array","has","itemView","getItemData","set","undefined","prepend","insertAfter","css","slideDown","get","model","jQuery","inArray","remove","delete","filterItem","filterStatus","tagName","extend","events"],"mappings":"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","file":"ListView.js","sourcesContent":["import BiontView from './BiontView';\n\nexport default class ListView extends BiontView.extend( {\n\ttagName: 'ul',\n\tevents : {}\n} ) {\n\n\t/**\n\t * Initialize this class\n\t */\n\tconstructor( data, options ) {\n\t\tsuper( data, options );\n\t\tif ( !data.view ) {\n\t\t\tthrow new TypeError( 'You need to pass a View to the ListView instance' );\n\t\t}\n\t\tif (this.constructor.name === 'ListView') {\n\t\t\tthrow new TypeError(\"Cannot construct ListView instances directly\");\n\t\t}\n\t\tthis.view = data.view;\n\t\tthis.listenTo( this.collection, \"sync\", this.render );\n\t\t// this.listenTo(this.collection, \"sort\", this.render);\n\t\t// this.listenTo( this.collection, \"change\", this.render );\n\t\tthis._views = new Map();\n\t\tthis.$el.empty();\n\t}\n\n\t/**\n\t * Handle output\n\t */\n\trender( force = false ) {\n\t\t/**\n\t\t * Don't render if the list cannot be seen.\n\t\t * Keep an eye on this and see if it causes problems\n\t\t */\n\t\tif ( !this.$el.is( ':visible' ) ) {\n\t\t\treturn this;\n\t\t}\n\t\tconsole.log( 'listview rendering' );\n\n\t\tif ( this.collection.isEmpty() ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( force ) {\n\t\t\tthis._views.clear();\n\t\t}\n\t\t// let models = this.collection.filter(this.filterItem.bind(this));\n\t\tlet models = this.collection.models;\n\t\tthis.removeObsoleteViews( models );\n\n\t\t//TODO This is an example for how we could sort the models before rendering\n\t\t// However, since the actual rendering code cannot re-sort on the fly,\n\t\t// it will only work the first time the list is rendered.\n\n\t\t// let pinStatus = [ 'active' ];\n\t\t// console.log( pinStatus );\n\t\t// if ( pinStatus ) {\n\t\t// \tmodels = _.sortBy( models, ( model )=> {\n\t\t// \t\tlet index = jQuery.inArray( model.get( 'status' ), pinStatus );\n\t\t// \t\treturn index !== -1 ? index : models.length;\n\t\t// \t} );\n\t\t// }\n\t\t// debugger;\n\n\t\tlet curView;\n\t\tmodels.forEach( ( item, index, array ) => {\n\t\t\tif ( !this._views.has( item ) ) {\n\n\t\t\t\tlet itemView = new this.view( this.getItemData( item ) );\n\t\t\t\tthis._views.set( item, itemView );\n\t\t\t\tlet $el = itemView.render().$el;\n\n\t\t\t\t/**\n\t\t\t\t * Keep sort order\n\t\t\t\t */\n\t\t\t\tif ( curView === undefined ) {\n\t\t\t\t\tthis.$el.prepend( $el );\n\t\t\t\t} else {\n\t\t\t\t\t$el.insertAfter( curView.$el );\n\t\t\t\t}\n\n\t\t\t\t$el.css( 'display', 'none' ).slideDown( 275 );\n\t\t\t}\n\t\t\tcurView = this._views.get( item );\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Walks over the views map and kills all\n\t * views that are not present in the current selection of models\n\t *\n\t * @param models\n\t */\n\tremoveObsoleteViews( models ) {\n\t\tthis._views.forEach( ( view, model ) => {\n\t\t\tif ( jQuery.inArray( model, models ) === -1 ) {\n\t\t\t\tthis._views.get( model ).remove();\n\t\t\t\tthis._views.delete( model );\n\t\t\t}\n\t\t} )\n\t}\n\n\t/**\n\t * Filter callback.\n\t *\n\t * Checks if the current item status is present in this ViewCollection's allowed status\n\t *\n\t * @param item\n\t * @returns {boolean}\n\t */\n\tfilterItem( item ) {\n\t\treturn true;\n\t\treturn jQuery.inArray( item.get( 'status' ), this.filterStatus ) !== -1;\n\t}\n\n\tgetItemData( item ) {\n\t\treturn {\n\t\t\ttagName: 'li',\n\t\t\tmodel  : item,\n\t\t};\n\t}\n}"]}