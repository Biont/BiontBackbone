{"version":3,"sources":["../../../src/js/Views/BiontView.js"],"names":["eventStorage","Map","_bubble","view","handle","data","upwards","parent","_trigger","subViewInstances","child","name","has","listeners","get","forEach","callback","call","BiontView","getTemplate","options","subViews","formatters","constructor","TypeError","tplOverride","templateFound","loadTemplate","render","force","rendered","$el","html","template","getTemplateData","autoBind","autoSubView","model","toJSON","formatData","forced","$","each","idx","obj","$this","subview","console","error","hasOwnProperty","subviewparent","cid","log","instance","View","remove","setElement","bind","prop","bindInput","bindDefault","value","attr","formatAttr","$element","listenTo","change","set","val","dump","JSON","stringify","assign","selector","undelegateEvents","bubble","capture","push","extend"],"mappings":"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","file":"BiontView.js","sourcesContent":["import Backbone from \"backbone\";\nimport {each, extend, mapObject} from \"underscore\";\n\nimport Tpl from '../template-loader';\n\nconst eventStorage = new Map();\n\n\nconst _bubble = (view, handle, data, upwards) => {\n    // console.log( '_bubble', [ view.constructor.name, handle, data, upwards ] );\n    if (upwards) {\n\n        if (!view.parent) {\n            return;\n        }\n        _trigger(view.parent, handle, data, upwards);\n        _bubble(view.parent, handle, data, upwards);\n    } else {\n        each(view.subViewInstances, (child, name) => {\n            // console.log( 'bubbling down to ' + child.constructor.name );\n            _trigger(child, handle, data, upwards);\n            _bubble(child, handle, data, upwards);\n        });\n    }\n\n};\n\nconst _trigger = (view, handle, data, upwards) => {\n    if (!eventStorage.has(view)) {\n        return;\n    }\n    let listeners = eventStorage.get(view);\n    if (!listeners[handle]) {\n        return;\n    }\n    listeners[handle].forEach((callback) => {\n        callback.call(this, data, upwards);\n    });\n};\n\nexport default class BiontView extends Backbone.View.extend({\n    subViews: {},\n    formatters: {}\n}) {\n    /**\n     * Make all BiontViews use our own TemplateLoader\n     *\n     * @returns {*}\n     */\n    get template() {\n        return this.getTemplate()\n    }\n\n    constructor(data = {}, options = {}) {\n        super(data, options);\n        if (data.subViews) {\n            this.subViews = data.subViews;\n        }\n        this.subViewInstances = {};\n        if (data.formatters) {\n            this.formatters = data.formatters;\n        }\n        this.parent = null;\n        // this.subViews = data.subViews;\n        if (this.constructor.name === 'BiontView') {\n            throw new TypeError(\"Cannot construct BiontView instances directly\");\n        }\n    }\n\n    /**\n     * Retrieves a template from the DOM\n     *\n     * @param tplOverride\n     * @returns {string}\n     */\n    getTemplate(tplOverride) {\n        if (tplOverride\n            &&\n            (\n                Tpl.templateFound(tplOverride)\n            )\n        ) {\n            return Tpl.loadTemplate(tplOverride);\n        }\n        return Tpl.getTemplate(this);\n    }\n\n    /**\n     * Very basic render function.\n     * @returns {BiontView}\n     */\n    render(force = false) {\n\n        if (!this.rendered || force) {\n            this.$el.html(this.template(this.getTemplateData()));\n            this.autoBind();\n            this.rendered = true;\n        }\n        this.autoSubView(force);\n\n        return this;\n    }\n\n    /**\n     * Gathers all data that is passed on to the template.\n     *\n     * Can be overloaded by subclasses to add custom data.\n     *\n     * @returns {{}}\n     */\n    getTemplateData() {\n        let data = this.model ? this.model.toJSON() : {};\n        data = this.formatData(data);\n        return data;\n    }\n\n    /**\n     * Apply configured subviews to their matching template tags.\n     *\n     * Example:\n     * // View\n     * class Foo extends BiontView.extend({\n\t *\n\t *     subViews: { myView: () => new BarView() }\n\t *\n\t * }){}\n     *\n     * // Template\n     * <div cata-subview=\"myView\"></div>\n     *\n     *\n     * @param forced\n     */\n    autoSubView(forced) {\n        $('[data-subview]', this.$el).each((idx, obj) => {\n            let $this = $(obj), data = $this.data();\n            if (!data.subview) {\n                console.error('empty subview attribute');\n                return;\n            }\n\n            if (!this.subViews.hasOwnProperty(data.subview)) {\n                return;\n            }\n            if (data.subviewparent && data.subviewparent !== this.cid) {\n                console.log('no want');\n\n                return;\n            }\n\n            let view = this.subViews[data.subview];\n            let instance = this.subViewInstances[data.subview];\n            if (instance && instance instanceof Backbone.View) {\n                if (!forced) {\n                    instance.render();\n                    return;\n                }\n                instance.remove();\n                delete this.subViewInstances[data.subview];\n\n            }\n            if (typeof view === 'function') {\n                // Support traditional and arrow functions to some extent\n                view = view.call(this, this);\n                view.parent = this;\n                view.setElement($this).render(forced);\n                $this.data('subviewparent', this.cid);\n                this.subViewInstances[data.subview] = view;\n            }\n\n        });\n    }\n\n    /**\n     * Binds model data to template tags\n     *\n     * Example:\n     *\n     * <div data-bind=\"name\"></div> // This will keep the current value of \"name\" inside the container's html\n     *\n     * <input type='text' data-bind=\"name\"> // This will instead set the input's value\n     *\n     */\n    autoBind() {\n        if (!this.model) {\n            return;\n        }\n        $('[data-bind]', this.$el).each((idx, obj) => {\n            let $this = $(obj), data = $this.data();\n            if (!data.bind) {\n                console.error('empty tag');\n                return;\n            }\n            switch ($this.prop('tagName')) {\n                case 'INPUT':\n                    this.bindInput($this, data.bind);\n                    break;\n                default:\n                    this.bindDefault($this, data.bind);\n                    break;\n\n            }\n        });\n    }\n\n    formatData(data) {\n\n        each(data, (value, attr) => {\n            data[attr] = this.formatAttr(attr, value)\n        });\n        return data;\n    }\n\n    formatAttr(attr, data) {\n\n        if (!this.formatters[attr]) {\n            return data;\n        }\n        return this.formatters[attr].call(this, data, this);\n    }\n\n    /**\n     * Default data binding handler.\n     * sets the element's html() to the specified model value.\n     *\n     * @param $element\n     * @param attr\n     */\n    bindDefault($element, attr) {\n        $element.html(this.formatAttr(attr, this.model.get(attr)));\n        this.listenTo(this.model, 'change', (model) => $element.html(this.formatAttr(attr, model.get(attr))));\n    }\n\n    /**\n     * Bind data to an input field. Will try to intelligently handle all different input types\n     *\n     * @param $element\n     * @param attr\n     */\n    bindInput($element, attr) {\n        switch ($element.attr('type')) {\n            case 'checkbox':\n                //TODO: allow setting up a [data-falsevalue=\"foo\"] for non-boolean values?\n                $element.change(() => this.model.set(attr, $element.prop('checked')));\n                this.listenTo(this.model, 'change', (model) => {\n                    $element.prop('checked', (\n                        model.get(attr)\n                    ));\n                });\n                $element.prop('checked', (\n                    this.model.get(attr)\n                ));\n                break;\n            default:\n                $element.change(() => this.model.set(attr, $element.val()));\n                this.listenTo(this.model, 'change', (model) => $element.val(model.get(attr)).change());\n                $element.val(this.model.get(attr));\n                break;\n        }\n    }\n\n    /**\n     * Render all model data as a string.\n     */\n    dump() {\n        console.log(this.model);\n        return JSON.stringify(this.getTemplateData());\n    }\n\n    /**\n     * Assigns a selector within the template to a specific subview, which will then get rendered\n     * @param view\n     * @param selector\n     */\n    assign(view, selector) {\n        selector = selector || '[data-subview=\"' + view.constructor.name + '\"]';\n\n        let $el;\n\n        if ($el = this.$(selector, this.$el)) {\n            view.setElement($el).render();\n\n        }\n    }\n\n    /**\n     * Removes the view from the DOM and also tries to deregister all event handlers\n     */\n    remove() {\n        this.undelegateEvents();\n        super.remove();\n    }\n\n    /**\n     * Bubble an event up or down.\n     * It will get passed on to all children or parents.\n     *\n     * @param handle\n     * @param data\n     * @param upwards\n     */\n    bubble(handle, data, upwards = true) {\n        _bubble(this, handle, data, upwards);\n    }\n\n    /**\n     * Act on a bubbled event.\n     *\n     * @param handle\n     * @param callback\n     */\n    capture(handle, callback) {\n        let listeners;\n        if (eventStorage.has(this)) {\n            listeners = eventStorage.get(this);\n        } else {\n            listeners = {};\n        }\n\n        if (!listeners[handle]) {\n            listeners[handle] = [];\n        }\n        listeners[handle].push(callback);\n        eventStorage.set(this, listeners);\n        console.log(this.constructor.name + ' listening', eventStorage);\n    }\n\n}"]}