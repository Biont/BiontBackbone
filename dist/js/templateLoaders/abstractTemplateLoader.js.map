{"version":3,"sources":["../../../src/js/templateLoaders/abstractTemplateLoader.js"],"names":["AbstractTemplateLoader","constructor","name","TypeError","forEach","method","getTemplate","object","tpl","getTemplateNameFromObject","console","error","loadTemplate","curObject","templateFound","Object","getPrototypeOf"],"mappings":";;;;;;IAAqBA,sB;AACjB,sCAAc;AAAA;;AAAA;;AACV,YAAI,KAAKC,WAAL,CAAiBC,IAAjB,KAA0B,wBAA9B,EAAwD;AACpD,kBAAM,IAAIC,SAAJ,CAAc,4DAAd,CAAN;AACH;AACD,SAAC,eAAD,EAAkB,cAAlB,EAAkCC,OAAlC,CAA0C,UAACC,MAAD,EAAY;AAClD,gBAAI,CAAC,MAAKA,MAAL,CAAL,EAAmB;AACf,sBAAM,IAAIF,SAAJ,CAAc,MAAKF,WAAL,CAAiBC,IAAjB,GAAwB,6BAAxB,GAAwDG,MAAtE,CAAN;AAEH;AACJ,SALD;AAMH;;qCAEDC,W,wBAAYC,M,EAAQ;AAChB,YAAIC,MAAM,KAAKC,yBAAL,CAA+BF,MAA/B,CAAV;AACA,YAAI,CAACC,GAAL,EAAU;AACNE,oBAAQC,KAAR,CAAc,sCAAsCJ,OAAON,WAAP,CAAmBC,IAAvE;AACA,mBAAO,YAAY;AACf,uBAAO,8CAAP;AACH,aAFD;AAGH;AACD,eAAO,KAAKU,YAAL,CAAkBJ,GAAlB,CAAP;AACH,K;;qCAEDC,yB,sCAA0BF,M,EAAQ;AAC9B;;;AAGA,YAAIM,YAAYN,MAAhB;AACA,eAAOM,aAAaA,UAAUZ,WAAV,CAAsBC,IAAtB,KAA+B,WAAnD,EAAgE;AAC5D,gBAAIA,OAAOW,UAAUZ,WAAV,CAAsBC,IAAjC;AACA,gBAAI,KAAKY,aAAL,CAAmBZ,IAAnB,CAAJ,EAA8B;AAC1B,uBAAOA,IAAP;AACH;AACDW,wBAAYE,OAAOC,cAAP,CAAsBH,SAAtB,CAAZ;AACH;AACD,eAAO,KAAP;AACH,K;;;;;kBArCgBb,sB","file":"abstractTemplateLoader.js","sourcesContent":["export default class AbstractTemplateLoader {\n    constructor() {\n        if (this.constructor.name === 'AbstractTemplateLoader') {\n            throw new TypeError(\"Cannot construct AbstractTemplateLoader instances directly\");\n        }\n        ['templateFound', 'loadTemplate'].forEach((method) => {\n            if (!this[method]) {\n                throw new TypeError(this.constructor.name + \" needs to implement method \" + method);\n\n            }\n        });\n    }\n\n    getTemplate(object) {\n        let tpl = this.getTemplateNameFromObject(object);\n        if (!tpl) {\n            console.error('Could not find template for View ' + object.constructor.name);\n            return function () {\n                return '<div class=\"tplError\">MISSING TEMPLATE</div>'\n            };\n        }\n        return this.loadTemplate(tpl);\n    }\n\n    getTemplateNameFromObject(object) {\n        /**\n         * Walk up the prototype chain to find matching templates\n         */\n        let curObject = object;\n        while (curObject && curObject.constructor.name !== 'BiontView') {\n            let name = curObject.constructor.name;\n            if (this.templateFound(name)) {\n                return name;\n            }\n            curObject = Object.getPrototypeOf(curObject);\n        }\n        return false;\n    }\n}\n"]}